generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Autorole {
  activated    Boolean  @default(false)
  guildId      String   @id
  lastEditedAt DateTime @default(now()) @updatedAt
  roleIds      String[] @default([])
}

model Giveaway {
  channelId               String?
  createdAt               DateTime      @default(now())
  description             String
  endAutomation           EndAutomation @default(End)
  endDate                 DateTime?
  ended                   Boolean       @default(false)
  entriesLocked           Boolean       @default(false)
  entriesUserIds          String[]      @default([])
  guildId                 String
  guildRelativeId         Int
  hostNotified            HostNotified  @default(None)
  hostUserId              String
  hostUserTag             String
  id                      Int           @id @default(autoincrement())
  lastEditedAt            DateTime      @default(now()) @updatedAt
  minimumAccountAge       String?
  pingRolesIds            String[]      @default([])
  prizes                  Prize[]
  publishedMessageId      String?
  publishedMessageUpdated Boolean       @default(false)
  requiredRolesIds        String[]      @default([])
  title                   String
  winnerMessageId         String?
  winnerMessageUpdated    Boolean       @default(false)
  winnerQuantity          Int           @default(1)
}

model Prize {
  additionalInfo String?
  createdAt      DateTime @default(now())
  giveaway       Giveaway @relation(fields: [giveawayId], references: [id], onDelete: NoAction)
  giveawayId     Int
  id             Int      @id @default(autoincrement())
  name           String
  quantity       Int      @default(1)
  winners        Winner[]
}

model Winner {
  claimed   Boolean  @default(false)
  createdAt DateTime @default(now())
  id        Int      @id @default(autoincrement())
  notified  Boolean  @default(false)
  prize     Prize    @relation(fields: [prizeId], references: [id], onDelete: NoAction)
  prizeId   Int
  userId    String
}

enum EndAutomation {
  None
  End
  Roll
  Publish
}

enum HostNotified {
  None
  BufferBefore
  OnEnd
}
